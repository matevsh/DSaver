// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model InvitationCode {
  id            String    @id @default(cuid())
  code          String    @unique @default(cuid())
  expiredAt     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  user          User?     @relation("generatedCodes")
  generatedById String?   @unique
  generatedBy   User?     @relation("generatedBy", fields: [generatedById], references: [id])
}

model User {
  id               String           @id @default(cuid())
  login            String           @unique
  name             String
  passwordHash     String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  role             Role             @default(USER)
  file             File[]
  invitationCodeId String           @unique
  invitationCode   InvitationCode   @relation("generatedCodes", fields: [invitationCodeId], references: [id])
  generatedCodes   InvitationCode[] @relation("generatedBy")
}

enum FileStatus {
  UPLOADED
  CACHED
}

model File {
  id         String      @id @default(cuid())
  name       String
  genName    String
  fileChunk  FileChunk[]
  size       Int
  ext        String
  chunkSize  Int
  channelId  String
  user       User        @relation(fields: [userId], references: [id])
  userId     String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  fileStatus FileStatus  @default(UPLOADED)
}

model FileChunk {
  id        String @id @default(cuid())
  file      File   @relation(fields: [fileId], references: [id])
  fileId    String
  index     Int
  messageId String
}
